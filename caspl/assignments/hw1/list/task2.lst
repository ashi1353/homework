     1                                  section	.rodata
     2                                  LC0:
     3 00000000 546865206E756D6265-     	DB	"The number of ones is:  %u", 10, 0	; Format string
     4 00000009 72206F66206F6E6573-
     5 00000012 2069733A202025750A-
     6 0000001B 00                 
     7                                  
     8                                  LCERR:
     9 0000001C 78206F72206B2C206F-         DB  "x or k, or both are off range.", 10, 0
    10 00000025 7220626F7468206172-
    11 0000002E 65206F66662072616E-
    12 00000037 67652E0A00         
    13                                  
    14                                  section .bss
    15                                  LC1:
    16 00000000 <res 00000004>          	RESD	1
    17                                  
    18                                  section .text
    19                                  	align 16
    20                                  	global ones_counter 
    21                                  	extern printf
    22                                      extern check
    23                                  
    24                                  ones_counter:
    25 00000000 55                      	push	ebp
    26 00000001 89E5                    	mov	ebp, esp	; Entry code - set up ebp and esp
    27 00000003 60                      	pusha			; Save registers
    28                                  
    29 00000004 8B4D08                  	mov ecx, dword [ebp+8]	; Get first argument (int x) 
    30 00000007 8B5D0C                  	mov ebx, dword [ebp+12]	; Get second argument (int k) 
    31                                      
    32 0000000A C705[00000000]0000-     	mov	dword [LC1], 0		; initialize answer
    33 00000012 0000               
    34                                  
    35                                      ; check the function arguments x and k.
    36                                      ; if check failed, print error and end the procedure
    37 00000014 53                          push ebx
    38 00000015 51                          push ecx
    39 00000016 E8(00000000)                call check
    40 0000001B 83C40C                      add esp, 12
    41 0000001E 83F800                      cmp eax, 0
    42 00000021 7424                        je error
    43                                  
    44                                      ; if k starts with value 0
    45 00000023 83FB00                      cmp ebx, 0
    46 00000026 742E                        je success
    47                                  
    48                                  loop:
    49 00000028 89C8                        mov eax, ecx 
    50                                  
    51                                      ; bitwise AND with 1 - if last bit is 0, skip body of loop
    52 0000002A 83E001                      and eax, 1
    53 0000002D 83F800                      cmp eax, 0
    54 00000030 7406                        je .skip
    55                                      
    56                                      ; else, last bit is 1
    57 00000032 FF05[00000000]              inc dword[LC1] ; increase ones counter
    58                                  
    59                                  .skip:
    60 00000038 D1E9                        shr ecx, 1 ; remove last bit of ecx
    61 0000003A 83F900                      cmp ecx, 0 ; if x is 0, stop
    62 0000003D 7417                        je success
    63                                  
    64 0000003F 4B                          dec ebx ; decrease k
    65 00000040 83FB00                      cmp ebx, 0 ; if k is 0, stop
    66 00000043 7411                        je success
    67                                  
    68 00000045 EBE1                        jmp loop
    69                                  
    70                                  error:
    71                                      ; call printf with error string
    72 00000047 68[1C000000]                push    LCERR
    73 0000004C E8(00000000)                call    printf
    74 00000051 83C404                      add     esp, 4 ; clean up stack after call
    75 00000054 EB13                        jmp end
    76                                  
    77                                  success:
    78                                      ; call printf with ones counter information
    79 00000056 FF35[00000000]          	push	dword[LC1]		; Call printf with 2 arguments: pointer to str
    80 0000005C 68[00000000]            	push	LC0		; and pointer to format string.
    81 00000061 E8(00000000)            	call	printf
    82 00000066 83C408                      add     esp, 8 ; clean up stack after call
    83                                  
    84                                  end:
    85 00000069 61                      	popa			; Restore registers
    86 0000006A 89EC                    	mov	esp, ebp	; Function exit code
    87 0000006C 5D                      	pop	ebp
    88 0000006D C3                      	ret
    89                                  
