     1                                  section	.rodata
     2                                  LC0:
     3 00000000 546865206E756D6265-     	DB	"The number of ones is:  %u", 10, 0	; Format string
     4 00000009 72206F66206F6E6573-
     5 00000012 2069733A202025750A-
     6 0000001B 00                 
     7                                  
     8                                  LCERR:
     9 0000001C 78206F72206B2C206F-         DB  "x or k, or both are off range.", 10, 0
    10 00000025 7220626F7468206172-
    11 0000002E 65206F66662072616E-
    12 00000037 67652E0A00         
    13                                  
    14                                  LCDBG:
    15 0000003C 783A2025752C206B3A-         DB  "x: %u, k: %u", 10, 0
    16 00000045 2025750A00         
    17                                  
    18                                  section .bss
    19                                  LC1:
    20 00000000 <res 00000004>          	RESD	1
    21                                  
    22                                  section .text
    23                                  	align 16
    24                                  	global ones_counter 
    25                                  	extern printf
    26                                      extern check
    27                                  
    28                                  ones_counter:
    29 00000000 55                      	push	ebp
    30 00000001 89E5                    	mov	ebp, esp	; Entry code - set up ebp and esp
    31 00000003 60                      	pusha			; Save registers
    32                                  
    33 00000004 8B4D08                  	mov ecx, dword [ebp+8]	; Get first argument (int x) 
    34 00000007 8B5D0C                  	mov ebx, dword [ebp+12]	; Get second argument (int k) 
    35                                      
    36 0000000A C705[00000000]0000-     	mov	dword [LC1], 0		; initialize answer
    37 00000012 0000               
    38                                  
    39                                      ; check the function arguments x and k.
    40                                      ; if check failed, print error and end the procedure
    41 00000014 53                          push ebx
    42 00000015 51                          push ecx
    43 00000016 E8(00000000)                call check
    44 0000001B 83C40C                      add esp, 12
    45 0000001E 83F800                      cmp eax, 0
    46 00000021 7424                        je error
    47                                  
    48                                      ; if k starts with value 0
    49 00000023 83FB00                      cmp ebx, 0
    50 00000026 742E                        je success
    51                                  
    52                                  loop:
    53 00000028 89C8                        mov eax, ecx 
    54                                  
    55                                      ; bitwise AND with 1 - if last bit is 0, skip body of loop
    56 0000002A 83E001                      and eax, 1
    57 0000002D 83F800                      cmp eax, 0
    58 00000030 7406                        je .skip
    59                                      
    60                                      ; else, last bit is 1
    61 00000032 FF05[00000000]              inc dword[LC1] ; increase ones counter
    62                                  
    63                                  .skip:
    64 00000038 D1E9                        shr ecx, 1 ; remove last bit of ecx
    65 0000003A 83F900                      cmp ecx, 0 ; if x is 0, stop
    66 0000003D 7417                        je success
    67                                  
    68 0000003F 4B                          dec ebx ; decrease k
    69 00000040 83FB00                      cmp ebx, 0 ; if k is 0, stop
    70 00000043 7411                        je success
    71                                  
    72 00000045 EBE1                        jmp loop
    73                                  
    74                                  error:
    75                                      ; call printf with error string
    76 00000047 68[1C000000]                push    LCERR
    77 0000004C E8(00000000)                call    printf
    78 00000051 83C404                      add     esp, 4 ; clean up stack after call
    79 00000054 EB13                        jmp end
    80                                  
    81                                  success:
    82                                      ; call printf with ones counter information
    83 00000056 FF35[00000000]          	push	dword[LC1]		; Call printf with 2 arguments: pointer to str
    84 0000005C 68[00000000]            	push	LC0		; and pointer to format string.
    85 00000061 E8(00000000)            	call	printf
    86 00000066 83C408                      add     esp, 8 ; clean up stack after call
    87                                  
    88                                  end:
    89 00000069 61                      	popa			; Restore registers
    90 0000006A 89EC                    	mov	esp, ebp	; Function exit code
    91 0000006C 5D                      	pop	ebp
    92 0000006D C3                      	ret
    93                                  
